// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "zango/northwind/odb/employees-odb-pgsql.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // employees
  //

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  persist_statement_name[] = "persist_zango_northwind_employees";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  find_statement_name[] = "find_zango_northwind_employees";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  update_statement_name[] = "update_zango_northwind_employees";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  erase_statement_name[] = "erase_zango_northwind_employees";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  query_statement_name[] = "query_zango_northwind_employees";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  erase_query_statement_name[] = "erase_query_zango_northwind_employees";

  const unsigned int access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::date_oid,
    pgsql::date_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int4_oid
  };

  const unsigned int access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::date_oid,
    pgsql::date_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::int4_oid
  };

  struct access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< photo_traits > photo_;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : photo_ (c, id, idn, idt)
    {
    }
  };

  // photo_
  //

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  select_name[] = "select_zango_northwind_employees_photo";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  insert_name[] = "insert_zango_northwind_employees_photo";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  delete_name[] = "delete_zango_northwind_employees_photo";

  const unsigned int access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  insert_types[] =
  {
    pgsql::int4_oid,
    pgsql::int8_oid,
    pgsql::text_oid
  };

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  select_statement[] =
  "SELECT "
  "\"northwind\".\"employees_photo\".\"index\", "
  "\"northwind\".\"employees_photo\".\"value\" "
  "FROM \"northwind\".\"employees_photo\" "
  "WHERE \"northwind\".\"employees_photo\".\"object_id_employee_id\"=$1 ORDER BY \"northwind\".\"employees_photo\".\"index\"";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  insert_statement[] =
  "INSERT INTO \"northwind\".\"employees_photo\" "
  "(\"object_id_employee_id\", "
  "\"index\", "
  "\"value\") "
  "VALUES "
  "($1, $2, $3)";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  delete_statement[] =
  "DELETE FROM \"northwind\".\"employees_photo\" "
  "WHERE \"object_id_employee_id\"=$1";

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = d.value_value.data ();
    b[n].capacity = d.value_value.capacity ();
    b[n].size = &d.value_size;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    if (t[1UL])
    {
      i.value_value.capacity (i.value_size);
      grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.value_value.capacity ());
      pgsql::value_traits<
          value_type,
          pgsql::id_string >::set_image (
        i.value_value,
        size,
        is_null,
        v);
      i.value_null = is_null;
      i.value_size = size;
      grew = grew || (cap != i.value_value.capacity ());
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      pgsql::value_traits<
          value_type,
          pgsql::id_string >::set_value (
        v,
        i.value_value,
        i.value_size,
        i.value_null);
    }
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, sts.id_binding ().count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (sts.data_binding_test_version ())
      {
        bind (sts.data_bind (), 0, id.count, di);
        sts.data_binding_update_version ();
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::photo_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::id_type
  access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::init (
        id,
        i.employee_id_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // employee_id_
    //
    if (composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::grow (
          i.employee_id_value, t + 0UL))
      grew = true;

    // last_name_
    //
    if (t[1UL])
    {
      i.last_name_value.capacity (i.last_name_size);
      grew = true;
    }

    // first_name_
    //
    if (t[2UL])
    {
      i.first_name_value.capacity (i.first_name_size);
      grew = true;
    }

    // title_
    //
    if (t[3UL])
    {
      i.title_value.capacity (i.title_size);
      grew = true;
    }

    // title_of_courtesy_
    //
    if (t[4UL])
    {
      i.title_of_courtesy_value.capacity (i.title_of_courtesy_size);
      grew = true;
    }

    // birth_date_
    //
    t[5UL] = 0;

    // hire_date_
    //
    t[6UL] = 0;

    // address_
    //
    if (t[7UL])
    {
      i.address_value.capacity (i.address_size);
      grew = true;
    }

    // city_
    //
    if (t[8UL])
    {
      i.city_value.capacity (i.city_size);
      grew = true;
    }

    // region_
    //
    if (t[9UL])
    {
      i.region_value.capacity (i.region_size);
      grew = true;
    }

    // postal_code_
    //
    if (t[10UL])
    {
      i.postal_code_value.capacity (i.postal_code_size);
      grew = true;
    }

    // country_
    //
    if (t[11UL])
    {
      i.country_value.capacity (i.country_size);
      grew = true;
    }

    // home_phone_
    //
    if (t[12UL])
    {
      i.home_phone_value.capacity (i.home_phone_size);
      grew = true;
    }

    // extension_
    //
    if (t[13UL])
    {
      i.extension_value.capacity (i.extension_size);
      grew = true;
    }

    // notes_
    //
    if (t[14UL])
    {
      i.notes_value.capacity (i.notes_size);
      grew = true;
    }

    // reports_to_
    //
    if (composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::grow (
          i.reports_to_value, t + 15UL))
      grew = true;

    // photo_path_
    //
    if (t[16UL])
    {
      i.photo_path_value.capacity (i.photo_path_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // employee_id_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::bind (
        b + n, i.employee_id_value, sk);
      n += 1UL;
    }

    // last_name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.last_name_value.data ();
    b[n].capacity = i.last_name_value.capacity ();
    b[n].size = &i.last_name_size;
    b[n].is_null = &i.last_name_null;
    n++;

    // first_name_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.first_name_value.data ();
    b[n].capacity = i.first_name_value.capacity ();
    b[n].size = &i.first_name_size;
    b[n].is_null = &i.first_name_null;
    n++;

    // title_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.title_value.data ();
    b[n].capacity = i.title_value.capacity ();
    b[n].size = &i.title_size;
    b[n].is_null = &i.title_null;
    n++;

    // title_of_courtesy_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.title_of_courtesy_value.data ();
    b[n].capacity = i.title_of_courtesy_value.capacity ();
    b[n].size = &i.title_of_courtesy_size;
    b[n].is_null = &i.title_of_courtesy_null;
    n++;

    // birth_date_
    //
    b[n].type = pgsql::bind::date;
    b[n].buffer = &i.birth_date_value;
    b[n].is_null = &i.birth_date_null;
    n++;

    // hire_date_
    //
    b[n].type = pgsql::bind::date;
    b[n].buffer = &i.hire_date_value;
    b[n].is_null = &i.hire_date_null;
    n++;

    // address_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.address_value.data ();
    b[n].capacity = i.address_value.capacity ();
    b[n].size = &i.address_size;
    b[n].is_null = &i.address_null;
    n++;

    // city_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.city_value.data ();
    b[n].capacity = i.city_value.capacity ();
    b[n].size = &i.city_size;
    b[n].is_null = &i.city_null;
    n++;

    // region_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.region_value.data ();
    b[n].capacity = i.region_value.capacity ();
    b[n].size = &i.region_size;
    b[n].is_null = &i.region_null;
    n++;

    // postal_code_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.postal_code_value.data ();
    b[n].capacity = i.postal_code_value.capacity ();
    b[n].size = &i.postal_code_size;
    b[n].is_null = &i.postal_code_null;
    n++;

    // country_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.country_value.data ();
    b[n].capacity = i.country_value.capacity ();
    b[n].size = &i.country_size;
    b[n].is_null = &i.country_null;
    n++;

    // home_phone_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.home_phone_value.data ();
    b[n].capacity = i.home_phone_value.capacity ();
    b[n].size = &i.home_phone_size;
    b[n].is_null = &i.home_phone_null;
    n++;

    // extension_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.extension_value.data ();
    b[n].capacity = i.extension_value.capacity ();
    b[n].size = &i.extension_size;
    b[n].is_null = &i.extension_null;
    n++;

    // notes_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.notes_value.data ();
    b[n].capacity = i.notes_value.capacity ();
    b[n].size = &i.notes_size;
    b[n].is_null = &i.notes_null;
    n++;

    // reports_to_
    //
    composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::bind (
      b + n, i.reports_to_value, sk);
    n += 1UL;

    // photo_path_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.photo_path_value.data ();
    b[n].capacity = i.photo_path_value.capacity ();
    b[n].size = &i.photo_path_size;
    b[n].is_null = &i.photo_path_null;
    n++;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    pgsql::statement_kind sk (pgsql::statement_select);
    composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // employee_id_
    //
    if (sk == statement_insert)
    {
      ::zango::northwind::employee_id const& v =
        o.employee_id ();

      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::init (
        i.employee_id_value,
        v,
        sk);
    }

    // last_name_
    //
    {
      ::std::string const& v =
        o.last_name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.last_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.last_name_value,
        size,
        is_null,
        v);
      i.last_name_null = is_null;
      i.last_name_size = size;
      grew = grew || (cap != i.last_name_value.capacity ());
    }

    // first_name_
    //
    {
      ::std::string const& v =
        o.first_name ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.first_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.first_name_value,
        size,
        is_null,
        v);
      i.first_name_null = is_null;
      i.first_name_size = size;
      grew = grew || (cap != i.first_name_value.capacity ());
    }

    // title_
    //
    {
      ::std::string const& v =
        o.title ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.title_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.title_value,
        size,
        is_null,
        v);
      i.title_null = is_null;
      i.title_size = size;
      grew = grew || (cap != i.title_value.capacity ());
    }

    // title_of_courtesy_
    //
    {
      ::std::string const& v =
        o.title_of_courtesy ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.title_of_courtesy_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.title_of_courtesy_value,
        size,
        is_null,
        v);
      i.title_of_courtesy_null = is_null;
      i.title_of_courtesy_size = size;
      grew = grew || (cap != i.title_of_courtesy_value.capacity ());
    }

    // birth_date_
    //
    {
      ::boost::gregorian::date const& v =
        o.birth_date ();

      bool is_null (true);
      pgsql::value_traits<
          ::boost::gregorian::date,
          pgsql::id_date >::set_image (
        i.birth_date_value, is_null, v);
      i.birth_date_null = is_null;
    }

    // hire_date_
    //
    {
      ::boost::gregorian::date const& v =
        o.hire_date ();

      bool is_null (true);
      pgsql::value_traits<
          ::boost::gregorian::date,
          pgsql::id_date >::set_image (
        i.hire_date_value, is_null, v);
      i.hire_date_null = is_null;
    }

    // address_
    //
    {
      ::std::string const& v =
        o.address ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.address_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.address_value,
        size,
        is_null,
        v);
      i.address_null = is_null;
      i.address_size = size;
      grew = grew || (cap != i.address_value.capacity ());
    }

    // city_
    //
    {
      ::std::string const& v =
        o.city ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.city_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.city_value,
        size,
        is_null,
        v);
      i.city_null = is_null;
      i.city_size = size;
      grew = grew || (cap != i.city_value.capacity ());
    }

    // region_
    //
    {
      ::std::string const& v =
        o.region ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.region_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.region_value,
        size,
        is_null,
        v);
      i.region_null = is_null;
      i.region_size = size;
      grew = grew || (cap != i.region_value.capacity ());
    }

    // postal_code_
    //
    {
      ::std::string const& v =
        o.postal_code ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.postal_code_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.postal_code_value,
        size,
        is_null,
        v);
      i.postal_code_null = is_null;
      i.postal_code_size = size;
      grew = grew || (cap != i.postal_code_value.capacity ());
    }

    // country_
    //
    {
      ::std::string const& v =
        o.country ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.country_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.country_value,
        size,
        is_null,
        v);
      i.country_null = is_null;
      i.country_size = size;
      grew = grew || (cap != i.country_value.capacity ());
    }

    // home_phone_
    //
    {
      ::std::string const& v =
        o.home_phone ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.home_phone_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.home_phone_value,
        size,
        is_null,
        v);
      i.home_phone_null = is_null;
      i.home_phone_size = size;
      grew = grew || (cap != i.home_phone_value.capacity ());
    }

    // extension_
    //
    {
      ::std::string const& v =
        o.extension ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.extension_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.extension_value,
        size,
        is_null,
        v);
      i.extension_null = is_null;
      i.extension_size = size;
      grew = grew || (cap != i.extension_value.capacity ());
    }

    // notes_
    //
    {
      ::std::string const& v =
        o.notes ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.notes_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.notes_value,
        size,
        is_null,
        v);
      i.notes_null = is_null;
      i.notes_size = size;
      grew = grew || (cap != i.notes_value.capacity ());
    }

    // reports_to_
    //
    {
      ::zango::northwind::employee_id const& v =
        o.reports_to ();

      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::init (
        i.reports_to_value,
        v,
        sk);
    }

    // photo_path_
    //
    {
      ::std::string const& v =
        o.photo_path ();

      bool is_null (true);
      std::size_t size (0);
      std::size_t cap (i.photo_path_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.photo_path_value,
        size,
        is_null,
        v);
      i.photo_path_null = is_null;
      i.photo_path_size = size;
      grew = grew || (cap != i.photo_path_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // employee_id_
    //
    {
      ::zango::northwind::employee_id& v =
        o.employee_id ();

      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::init (
        v,
        i.employee_id_value,
        db);
    }

    // last_name_
    //
    {
      ::std::string& v =
        o.last_name ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.last_name_value,
        i.last_name_size,
        i.last_name_null);
    }

    // first_name_
    //
    {
      ::std::string& v =
        o.first_name ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.first_name_value,
        i.first_name_size,
        i.first_name_null);
    }

    // title_
    //
    {
      ::std::string& v =
        o.title ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.title_value,
        i.title_size,
        i.title_null);
    }

    // title_of_courtesy_
    //
    {
      ::std::string& v =
        o.title_of_courtesy ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.title_of_courtesy_value,
        i.title_of_courtesy_size,
        i.title_of_courtesy_null);
    }

    // birth_date_
    //
    {
      ::boost::gregorian::date& v =
        o.birth_date ();

      pgsql::value_traits<
          ::boost::gregorian::date,
          pgsql::id_date >::set_value (
        v,
        i.birth_date_value,
        i.birth_date_null);
    }

    // hire_date_
    //
    {
      ::boost::gregorian::date& v =
        o.hire_date ();

      pgsql::value_traits<
          ::boost::gregorian::date,
          pgsql::id_date >::set_value (
        v,
        i.hire_date_value,
        i.hire_date_null);
    }

    // address_
    //
    {
      ::std::string& v =
        o.address ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.address_value,
        i.address_size,
        i.address_null);
    }

    // city_
    //
    {
      ::std::string& v =
        o.city ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.city_value,
        i.city_size,
        i.city_null);
    }

    // region_
    //
    {
      ::std::string& v =
        o.region ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.region_value,
        i.region_size,
        i.region_null);
    }

    // postal_code_
    //
    {
      ::std::string& v =
        o.postal_code ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.postal_code_value,
        i.postal_code_size,
        i.postal_code_null);
    }

    // country_
    //
    {
      ::std::string& v =
        o.country ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.country_value,
        i.country_size,
        i.country_null);
    }

    // home_phone_
    //
    {
      ::std::string& v =
        o.home_phone ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.home_phone_value,
        i.home_phone_size,
        i.home_phone_null);
    }

    // extension_
    //
    {
      ::std::string& v =
        o.extension ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.extension_value,
        i.extension_size,
        i.extension_null);
    }

    // notes_
    //
    {
      ::std::string& v =
        o.notes ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.notes_value,
        i.notes_size,
        i.notes_null);
    }

    // reports_to_
    //
    {
      ::zango::northwind::employee_id& v =
        o.reports_to ();

      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::init (
        v,
        i.reports_to_value,
        db);
    }

    // photo_path_
    //
    {
      ::std::string& v =
        o.photo_path ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.photo_path_value,
        i.photo_path_size,
        i.photo_path_null);
    }
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    pgsql::statement_kind sk (pgsql::statement_select);
    {
      composite_value_traits< ::zango::northwind::employee_id, id_pgsql >::init (
        i.id_value,
        id,
        sk);
    }
  }

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::persist_statement[] =
  "INSERT INTO \"northwind\".\"employees\" "
  "(\"employee_id_employee_id\", "
  "\"last_name\", "
  "\"first_name\", "
  "\"title\", "
  "\"title_of_courtesy\", "
  "\"birth_date\", "
  "\"hire_date\", "
  "\"address\", "
  "\"city\", "
  "\"region\", "
  "\"postal_code\", "
  "\"country\", "
  "\"home_phone\", "
  "\"extension\", "
  "\"notes\", "
  "\"reports_to_employee_id\", "
  "\"photo_path\") "
  "VALUES "
  "($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::find_statement[] =
  "SELECT "
  "\"northwind\".\"employees\".\"employee_id_employee_id\", "
  "\"northwind\".\"employees\".\"last_name\", "
  "\"northwind\".\"employees\".\"first_name\", "
  "\"northwind\".\"employees\".\"title\", "
  "\"northwind\".\"employees\".\"title_of_courtesy\", "
  "\"northwind\".\"employees\".\"birth_date\", "
  "\"northwind\".\"employees\".\"hire_date\", "
  "\"northwind\".\"employees\".\"address\", "
  "\"northwind\".\"employees\".\"city\", "
  "\"northwind\".\"employees\".\"region\", "
  "\"northwind\".\"employees\".\"postal_code\", "
  "\"northwind\".\"employees\".\"country\", "
  "\"northwind\".\"employees\".\"home_phone\", "
  "\"northwind\".\"employees\".\"extension\", "
  "\"northwind\".\"employees\".\"notes\", "
  "\"northwind\".\"employees\".\"reports_to_employee_id\", "
  "\"northwind\".\"employees\".\"photo_path\" "
  "FROM \"northwind\".\"employees\" "
  "WHERE \"northwind\".\"employees\".\"employee_id_employee_id\"=$1";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::update_statement[] =
  "UPDATE \"northwind\".\"employees\" "
  "SET "
  "\"last_name\"=$1, "
  "\"first_name\"=$2, "
  "\"title\"=$3, "
  "\"title_of_courtesy\"=$4, "
  "\"birth_date\"=$5, "
  "\"hire_date\"=$6, "
  "\"address\"=$7, "
  "\"city\"=$8, "
  "\"region\"=$9, "
  "\"postal_code\"=$10, "
  "\"country\"=$11, "
  "\"home_phone\"=$12, "
  "\"extension\"=$13, "
  "\"notes\"=$14, "
  "\"reports_to_employee_id\"=$15, "
  "\"photo_path\"=$16 "
  "WHERE \"employee_id_employee_id\"=$17";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::erase_statement[] =
  "DELETE FROM \"northwind\".\"employees\" "
  "WHERE \"employee_id_employee_id\"=$1";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::query_statement[] =
  "SELECT "
  "\"northwind\".\"employees\".\"employee_id_employee_id\", "
  "\"northwind\".\"employees\".\"last_name\", "
  "\"northwind\".\"employees\".\"first_name\", "
  "\"northwind\".\"employees\".\"title\", "
  "\"northwind\".\"employees\".\"title_of_courtesy\", "
  "\"northwind\".\"employees\".\"birth_date\", "
  "\"northwind\".\"employees\".\"hire_date\", "
  "\"northwind\".\"employees\".\"address\", "
  "\"northwind\".\"employees\".\"city\", "
  "\"northwind\".\"employees\".\"region\", "
  "\"northwind\".\"employees\".\"postal_code\", "
  "\"northwind\".\"employees\".\"country\", "
  "\"northwind\".\"employees\".\"home_phone\", "
  "\"northwind\".\"employees\".\"extension\", "
  "\"northwind\".\"employees\".\"notes\", "
  "\"northwind\".\"employees\".\"reports_to_employee_id\", "
  "\"northwind\".\"employees\".\"photo_path\" "
  "FROM \"northwind\".\"employees\"";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"northwind\".\"employees\"";

  const char access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::table_name[] =
  "\"northwind\".\"employees\"";

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.employee_id ());

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // photo_
    //
    {
      ::std::vector< char > const& v =
        obj.photo ();

      photo_traits::persist (
        v,
        esc.photo_);
    }

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.employee_id ());
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // photo_
    //
    {
      ::std::vector< char > const& v =
        obj.photo ();

      photo_traits::update (
        v,
        esc.photo_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // photo_
    //
    photo_traits::erase (
      esc.photo_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::pointer_type
  access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.employee_id ());

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // photo_
    //
    {
      ::std::vector< char >& v =
        obj.photo ();

      photo_traits::load (
        v,
        esc.photo_);
    }
  }

  result< access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::object_type >
  access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::zango::northwind::employees, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"northwind\".\"employees_photo\" CASCADE");
          db.execute ("DROP TABLE IF EXISTS \"northwind\".\"employees\" CASCADE");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"northwind\".\"employees\" (\n"
                      "  \"employee_id_employee_id\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"last_name\" TEXT NOT NULL,\n"
                      "  \"first_name\" TEXT NOT NULL,\n"
                      "  \"title\" TEXT NULL,\n"
                      "  \"title_of_courtesy\" TEXT NULL,\n"
                      "  \"birth_date\" DATE NULL,\n"
                      "  \"hire_date\" DATE NULL,\n"
                      "  \"address\" TEXT NULL,\n"
                      "  \"city\" TEXT NULL,\n"
                      "  \"region\" TEXT NULL,\n"
                      "  \"postal_code\" TEXT NULL,\n"
                      "  \"country\" TEXT NULL,\n"
                      "  \"home_phone\" TEXT NULL,\n"
                      "  \"extension\" TEXT NULL,\n"
                      "  \"notes\" TEXT NULL,\n"
                      "  \"reports_to_employee_id\" INTEGER NULL,\n"
                      "  \"photo_path\" TEXT NULL)");
          db.execute ("CREATE TABLE \"northwind\".\"employees_photo\" (\n"
                      "  \"object_id_employee_id\" INTEGER NOT NULL,\n"
                      "  \"index\" BIGINT NOT NULL,\n"
                      "  \"value\" CHAR(1) NOT NULL,\n"
                      "  CONSTRAINT \"object_id_fk\"\n"
                      "    FOREIGN KEY (\"object_id_employee_id\")\n"
                      "    REFERENCES \"northwind\".\"employees\" (\"employee_id_employee_id\")\n"
                      "    ON DELETE CASCADE)");
          db.execute ("CREATE INDEX \"employees_photo_object_id_i\"\n"
                      "  ON \"northwind\".\"employees_photo\" (\"object_id_employee_id\")");
          db.execute ("CREATE INDEX \"employees_photo_index_i\"\n"
                      "  ON \"northwind\".\"employees_photo\" (\"index\")");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_pgsql,
    "",
    &create_schema);
}

#include <odb/post.hxx>
